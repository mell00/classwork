The Maximal Contiguous Subsequence Sum Problem
----------------------------------------------
-empty space is a valid subsequence with sum = 0
-methods:
  (1) brute force:
    for all possible starting positions...
      for all possible ending positions...
        sum between start and end

    total runtime complexity: O(n^3)

  (2) merge inner two loops:
    for all possible starts...
      sum = 0;
      for all possible ends...
        sum += v[ends];

    total runtime complexity: O(n^2)

  (3) "chop" negative sum prefixes:
    sum = 0;
    for all possible starts...
      sum += v[start];
      if our sum is maximal, update
      if our sum is less than 0, chop it off and restart sum = 0;

    total runtime complexity: O(n)

Amortized Analysis
------------------
- answers "if you run a O(g(n)) function k times, is the *average* still O(g(n))?"
  -in some cases, no; the average runtime for 1 time can be different from the average runtime of k times
(ex) a "Pile" data structure
  - holds a collection of items, supporting one operation: .ar(e, n)
    (1) removes the n most-recently added items (one at a time) } O(n)
    (2) adds e to the pile } O(1)
    total runtime of .ar(e, n) is O(n)

  pile p; // empty
  p.ar(10,0); //remove nothing and at 10 } O(1)
  p.ar(7,0); // just add 7 } O(1)
  p.ar(7,3); // remove 3; att 7 to the pile } O(n)
  average = O(1)

  vectors
  -------
  - "growable arrays"
  (ex) the operation v.push_back(e) adds e to the end of v, running in O(1) *amortized time*.
    class vector {
      public:
        void.push_back(jnt x);
      private:
        int *data = nullptr;
        int sz = 0, cap = 1;
    }

    data |8|2|-1|7|5| | | |
    cap = 8;       ^
    sz = 4;        |
            push_back(5)

    void vector::push_back (int e)
    {
      if (sz < cap) } O(1)
      {
        data[sz] = e;
        ++sz;
      }
      else {
        /sz === cap (full)
        int maxcap = 2 * cap)
        int* newdata = new int{newcap];
        for (int i = 0; i < sz; ++i)}
          mewdata[i] = data[i];

        delete[0] data;
        data = newdata;
        cap = newcap;

        data[sz] = e;
        --sz;
      }
    }

      - typically, avg cost per pushback increases with each pushback
        - unless you square capacity (but you waste memory)

Vector Operations and Big-O
---------------------------
Operation         Vector Big-O
[i]               O(1) *
.size()           O(1)
.push_back()      O(1) avg. *
.pop_back()       O(1) *
.push_front()     O(n) (have to shift everything to the front)
.pop_front()      O(n) (have to shift everything to the front)
.clear            O(1)
.insert           O(n)
.erase            O(n)

* vectors are suited for these operations, the rest not so much

Deque (devector)
----------------
--------------cap-------------->
           ---sz--->
|        | |\\\\\\\| |         |
available  in-use    available
-push_front and push_back add to respective spaces adjacent to in-use

(ex) vector<int> v={7,2,3,5};
Address  |  Value
---------|-------
1000     |  7
1004     |  2
1008     |  3
1012     |  5

v[i] <= 1000 (start addr.) + 4 (size of int) * i, which has complexity of O(1)
- makes other operations faster, but [i] slower

Linked List
-----------
-a sequence of *nodes* linked by their next pointers
- no need to shuffle nodes when deleting

Diagram of a node:
----------------
|  7   |  ->   |
----------------
 value   next

 nodes:
 ---------------- ---------------- ----------------
 |  7   |  ->   | |  2   |  ->   | |  5   |   /   |
 ---------------- ---------------- ----------------
  value   next      value   next     value  nullptr

  -inserting and deleting nodes requires no shifting (takes constant amount of time)
  -however, indexing has complexity of O(n) because one node refers to the next
  -starts with head node, and ends with tail node
  -tail node not required but will speed list scanning up

  List O()
  ---------------------------
  Operation         Vector Big-O
  [i]               O(i)
  .size()           O(n)/O(1)*
  .push_back()      O(n)/O(1)*
  .pop_back()       O(n)
  .push_front()     O(1)*
  .pop_front()      O(1)*
  .clear            O(n)
  .insert           O(1)*
  .erase            O(1)*

  * lists are suited for these operations, the rest not so much

insert(A)
  ------
  -how to insert a new node between node A and node B:
    (1) create a new node n // O(1)
    (2) point n next to B // O(1)
    (3) point A next to n // O(1)
    - note: can't go backwards to A
    - A is the parameter and B is the output
-special cases:
  -inserting a new head (insert(a==nullptr))
    (1) create a new node n // O(1)
    (2) point n's next to existing head B // O(1)
    (3) point "head" to n // O(1)

  -insert a new tail (insert(a==tail))
    (1) create a new node n // O(1)
    (2) point n's next to nullptr (A's next)
    (3) point A's next to n

  -insert new head and tail
    (1) create a new node n // O(1)
    (2) point n's next to nullptr (head)
    (3) point "head" next to n
    (4) point "tail" to n
