Quicksort
---------
Partition:
  | |2|-1|3|9|7|5|10|4| |
  suppose pivot = 5

  | |2|-1|3|9|7|5|10|4| |
   i                   j

  i looks for element >= pivot
  j looks for element <= pivot

  | |2|-1|3|9|7|5|10|4| |
            i        j
  then swap i and j

  | |2|-1|3|4|7|5|10|9| |
            i        j

  search and swap again
  | |2|-1|3|4|5|7|10|9| |
              j i

-good pivot
  -picked at random
  -i.e. pick three at random, then use median of those three
-bad pivot
  -largest/smallest elements (avoid last or first elements)

int partition(int* arr, int size);
void quicksort(int* arr, int size) //in house
{
  if(size <= 1) return;
  else {// size >= 2
    int mid = partition(arr,size);
    if(mid == size) mid = size-1;
    quicksort(arr,mid); // left half of arr
    qicksort(arr+mid,size-mid); // right half of arr
  }
}

runtime:
  best case: log_2(n) x n = O(nlog_2(n)); each partition splits array in exactly half, quarters, eights, etc
  and size = 1 for each partition at the end
  worst case: n x n = O(n^2); for every step, partitions consist of one element and the rest
  in another array
  normal case: log_2(n) x n = O(nlog_2(n)); picking partitions that are better than worst
  case but not exactly equal sizes;

  quicksort requires taking copy but is faster

Special-Case Sorting
--------------------
-given a sequence v consisting of a permutation (rearrangement) of the values 0, 1, 2, 3, n - 2, n - 1, sort v.

vector<int> v = {1, 5, 0, 2, 4, 3;} // n=6
                         |
                         v
                {0, 1, 2, 3, 4, 5}

for (int i = 0; i < v.size(); ++i) //runtime of O(n)
  v[i] = i;

Counting Sort
-------------
-given a sequence v of values between 0 and k-1, in any order, possibly with duplicates
sort this sequence

ex: k = 3
v = {1, 0 , 2, 0 , 1, 1, 0, 2, 1}
  0's = 3
  1's = 4
  2's = 2
O(n) time, O(k memory)
-> {0,0,0,1,1,1,1,2,2}

k = 10000000
v = {1,3,5,7,9,2}
  0:0
  1:1
  2:1
  9999999:0
  O(n) time, O(k memory)
  {1,2,3,5,....} // O(n) time O(k) mean
}

void counting_sort(vector<int>&v,int k)
{
  //stage 1: counting
vector<int> cs(k,0); /{0,0,...,0};
for (int x : v)
cs[x]++;
  //stage 2L sort
v.clear();
for(int x = 0; x < k; ++x) //O(k+n)
  for(int i = 0; i < cs[x]; ++i)
    v.push_back(x);

}

Bucket Sort
-input sequence is uniformly distributed (all possible values are equally possible)
ex: 23, 28, 07, 23, 91, 45, 56, 60, 42
-complexity: O(n/k + k)

        23  42
7   18  22  45  56  60           91
---------------------------------------
 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

Hybrid Sorting
--------------
-pick algorithm based on n


Module 4: Binary Trees
----------------------
-binary search
  ex: |-1|2|3| 7 |10|15| 19 |
      low     mid       high
      target = 10
      find exact middle between low and the high
      first place to be looked at is 7
      because target > mid, move low to 7
      next midpoint is 15
      |-1|2|3| 7 | 10| 15| 19 |
              low     mid  high
      because target < mid, move high, low, and mid to 10
      find: O(log_2(n))
      insert: O(n)
      erase: O(n)
-binary tree: either
  -the empty tree (nothing)
  -a node consisting of a value, a left subtree, and a right subtree
  -root: top node of the tree, used to traverse the tree
  -leaves: nodes where both "children" are empty
  -internal nodes: nodes, other than the root, with at least one child
  -size of tree: # of nodes
  -height of tree: # of nodes on the longest path from the root to any leaf
    -want to squish tree as compact height-wise as possible
    minimum height = O(log_2(n)), maximum height = O(n)
  -classes of binary trees
    -full tree: tree in which every node has 0 or 2 children (never 1 child)
    -complete tree: tree in which every level is full, except possibly the bottom
    which fills left-to-right (height = O(log_2(n)))
    -balanced tree: height is O(log_2(n)) of size
    -degenerate tree: height is O(n) of size (similar to a linked list)
