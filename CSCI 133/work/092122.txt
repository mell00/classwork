Queues
------

q |1|2|3| | | | <-- treated as a circular buffer
cap:
sz:

  -enqueue:
    ++back;
    q[back] = x
  -dequeue:
    ++front;

class queue {
  public:
    void enqueue(int x);
    int dequeue();
    bool empty();
  private:
    int* q;
    int sz,cap;
    int front = ,back = ;
}

bool queue::empty()
{
  return sz == 0;
}

void queue::enqueue(int x)
{
  if(sz == cap)
    Queue Overflow!!
  ++back;
  if(back == cap)
    back = 0;
  q[back] = x;
  ++sz;
}

int queue::dequeue()
{
  if(sz == 0)
    Queue Underflow!!
  int x = q[front];
  ++front;
  if(front == cap)
    front = 0;
  --sz;
  return x;
}

Recursion
---------
-breaking problems into sub-problems where the sub-problems have the same "shape"/form
as the original

ex: Add up the numbers between 1 and n
1+2+3+...+n-1+n
  with loops:
    int sum(int n)
    {
      int s = 0;
      for(int i = 1; i <= n; ++i)
        s = s + i;
      return s;
    }
  with recursion:
    int sum(int n)
    {
      if(n == 1)
        return 1;
      else
        return sum(n-1)+n;
    }

    |          |
    |sum(n = 1)|
    |sum(n = 2)|
    |sum(n = 3)|
    |sum(n = 4)|
    ------------

  -recursion tree:
    sum(4) = 10
      |
      v
    sum(3) + 4 = 6 + 4 = 10
      |
      v
    sum(2) + 3 = 3 + 3 = 6
      |
      v
    sum(1) + 2 = 1 + 2 = 3
      |
      v
      1

ex: the Fibonacci Sequence
  |1|1|2|3|5|8| .... |
   0 1 2 3 4 5  ....

   F0 = 1
   F1 = 1
   Fn when n>1 = Fn-1 + Fn-2 (a recurrence relation)

   int fib(int n)
   {
    if (n == 0 or n == 1)
      return 1;
    else
      return fib(n-1)+fib(n-2);
   }

   recursion tree:
     ------fib(5)------
    |                  |
    v                  v
  fib(4)       +     fib(3)
|        |
v        v

     sum(2) + 3 = 3 + 3 = 6
       |
       v
     sum(1) + 2 = 1 + 2 = 3
       |
       v
       1
    (see notes for whole picture, lol)
  with loops:
    int fib(int n)
    {
      int p0 = 1, p1 = 1;
      for (int i = 0; i < n; ++i){ //O(n)
        int p2 = p0 + p1;
        p0 = p1;
        p1 = p2;
      }
      return p0;
    }
  with recursion:
    int fib(int n, int p0 = 1, int p1 = 1)
    {
      if (n == 0)
        return p0;
      else if (n == 1)
        return p1;
      else
        return fib(n-1,p1,p0+p1);
    }
      recursion tree (linearly recursive and tail recursive):
      fib(5,1,1) = 8
          |
          v
      fib(4,1,2) = 8
          |
          v
      fib(3,2,3) = 8
          |
          v
      fib(2,3,5) = 8
          |
          v
      fib(1,5,8) = 8
          |
          v
          8
      -tail recursive: sum for each step are the same as the bottom
        -if tree branches out, tree is NOT tail recursive

How to write a recursive function?
----------------------------------
(1) How do we "shrink" the problem into subproblem(s) of the same "shape"?
(2) How do we "grow" the answers to the subproblems(s) back into answers of
our original problem?
(3) What is the smallest/simplest possible form of the problem? Where will this end up?

ex: Factorial - write a function int fact(int n); which computes the factorial of n
  fact(n = 4) ----------------------------------> 24
  |  -1 ("shrink")                              ^ multiply by n ("grow")
  v                                             |
  fact(3) ------recursive leap of faith-------> 6
  |                                             ^
  |                                             |
  |                                             |
  v                                             |
  fact(0)-------------------------------------> 1

ex: Integer Powers - write a function float pow(float b, int p); which computes b to
the pth power (where p >= 0)
  b^p = b * b *...* b, p times
  pow(b = 2,p = 5) ----------------------------> 32
  |  p-1 ("shrink")                             ^ multiply by b ("grow")
  v                                             |
  pow(2,4) ------recursive leap of faith------> 16
  |                                             ^
  |                                             |
  |                                             |
  v                                             |
  fact(2,0)-----------------------------------> 1

  note: if there is no "grow", then function is tail recursive

  float pow(float b, int p) //linearly recursive, not tail recursive, O(p)
  {
    if(p == 0)
      return 1;
    else
      return pow(b,p-1 "shrink") * b "grow";
  }

  b^0 = 1
  b^n = b * b^(n-1) (if n is odd)
  b^n = (b^0.5n)^2 (if n is even)

  float pow(float b, int p) //linearly recursive, not tail recursive, O(log base 2 p)
  {
    if(p == 0)
      return 1;
    else if(p % 2 == 1)
      return pow(b,p-1 "shrink") * b "grow";
    else {
      int b2 = pow(b,p/2);
      return b^2*b^2;
    }
  }
ex: String Length - Wrtie a function int len(string s); that returns the length of s,
using only s.empty() and s.pop_back()

  len("potato") ------------------------------> 6
  |  s.pop_back ("shrink")                      ^ add 1 ("grow")
  v                                             |
  len("potat") ---recursive leap of faith-----> 5
  |                                             ^
  |                                             |
  |                                             |
  v                                             |
  len("") ------------------------------------> 0

  int len(string s)
  {
    if(s.empty())
      return 0;
    else{
      s.pop_back();
      return len(s) + 1;
    }
  }

 ex: String Concatenation - Write a function string concat(string a, string b); which
 concatenates a and b
  concat("cat","dog") -> "catdog"
  concat("cat","dog") ---------------------> "catdog"
  |  s.pop_back ("shrink")                      ^ add 'c' ("grow")
  v                                             |
  concat("cat","dog") ---leap of faith---> "atdog"
  |                                             ^
  |                                             |
  |                                             |
  v                                             |
  concat("","dog") -----------------------------> "dog"

  string concat(string a, string b)
  {
    if(a.empty())
      return b;
    else{
      char x = a.at(0); //x='c'
      a.erase(0,1); //"at"
      string s = concat(a,b); //"atdog"
      s.insert(0,x); //"catdog"
      return s;
    }
  }

  ex:
  rev("Hello") ----------------------------> "olleH"
  |  s.pop_back ("shrink")                      ^ add 'c' ("grow")
  v                                             |
  rev("Hello") -------leap of faith---------> "lleH"
  |                                             ^
  |                                             |
  |                                             |
  v                                             |
  rev("") ------------------------------------> ""

  string rev(string s)
  {
    if(s.empty())
      return "";
    else{
      char x = s.back();
      s.pop_back();
      string s2 = rev(s);
      s2.insert(0,x);
      return s2;
    }
  }

  rev("Hello") = "olleH"
  | x = "o"
  v
  rev("Hell") = "lleH"
  | x = "l"
  V
  rev("Hel") = "leH"
  | x = "l"
  v
  rev("He") = "eH"
  | x = "e"
  v
  rev("H") = "H"
  | x = "H"
  v
  rev("") = 0
  |
  v
  ""
