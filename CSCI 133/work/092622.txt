Midterm 1 Review
----------------
(1) C++ Review
(2) Big-O, Vectors, Lists, Stacks, and Queues
-each module is 5 questions, 3/5 questions is a pass for the module

Module 1: C++ Review
--------------------
- may refer to Assignment #1
(ex) given this ordered array class, write the implementation of has_duplicate which
returns true if the array contains more than one copy of x and false otherwise:
class ordered_array{
  public:
    :
    :
    bool has_duplicate(int x)
    :
    :
  private:
    int* data;
    int sz,cap;
}

bool ordered_array::has_duplicate(int x){
  int c = 0;
  for (int i = 0; i < sz; ++i)
    if(data[i] == x)
      ++c;
  return c > 1;
}
OR
bool ordered_array::has_duplicate(int x){
  int c = 0;
  for (int i = 0; i < sz; ++i)
    if(data[i] == x)
      ++c;
    if(c == 2)
      return true;
  return false;
}

(ex) What does this function do? Write two examples of vectors size >= 4 and show
what the function will do to them
void f(vector<int>& v)
{
  for (int i = 0; i < v.size(); ++i)
    if(v[i] < 0)
      swap(v[i],v[v.size()-1-i]);
}
  here, {1,2,3,4} --> {1,2,3,4}, {1,-2,-3,4} --> {1,-3,-2,4} --> {1,-2,-3,4},
  and {-1,2,-3,4} --> {4,2,-3,-1} --> {-1,-3,2,4}

Module 2: Big-O, Vectors, Lists, Stacks, and Queues
---------------------------------------------------
- step-wise analysis
    -best case: how to make the program quit as soon as possible
    -worst case: how to make the program go on for as long as possible
    (ex) analyze this function and count the number of times the data[...]
    and ++c operations are performed

    bool has_duplicate(const vector<int>&data, int x){
      int c = 0;
      for (int i = 0; i < data.size(); ++i)
        if(data[i] == x)
          ++c;
        if(c == 2)
          return true;
      return false
      }             best case     worst case
        ----------------------------------------
        ++c         2              0 or 1
        data[i]     2              n
        complexity: O(1)           O(n)

        (in step-wise analysis problems, don't give the Big-O complexity unless asked to)
    (ex) Plot the costs of the first 10 push_backs into a vector which resizes
    newcap = cap*3 + 2 when full

    push_back # | sz | cap | cost | avg cost
    ------------|----|-----|------|---------
                  0     1
    ----------------------------------------
    1             1     1     1-------------
    2             2     5     2
    3             3     5     1 5/4 = 1.25
    4             4     5     1
    5             5     5     1--------------
    6             6     17    6--------------
    7             7     17    1
    8             8     17    1 18/13 = 1.38
    9             9     17    1
    10            10    17    1
                              1--------------

    (ex) Given this linked list class
    class list{
      public:
        struct node{
          int value;
          node* next;
        };
        :
        :
        bool has_duplicate(int x);
        :
      private:
        node* head = nullptr;
    };
    (you may use the int list::size() and int list::at(int i) functions if you want)
    bool list::has_duplicate(int x){
      int c = 0;
      for (int i = 0; i < size(); ++i)
        if(at(i) == x)
          ++c;
        if(c == 2)
          return true;
      return false;
    }
    best case: O(1)
    worst case: O(n^2) (because at() and size() are both O(n) and nested)
    bool list::has_duplicate(int x){
      int c = 0;
      node* n = head;
      while (n != nullptr){
        if(n->value == x)
          ++c;
        if(c==2)
          return true;
      }
      return false;
    }
- stacks
  (ex) stack{
        public:
          :
          :
          void push(int x);
          void pop();
          :
        private:
          int* st;
          int sz,cap;
      }

      |2|3|7|5| | | | |
      sz = 4
      |   |
      |   |
      | 5 |
      | 7 |
      | 3 |
      | 2 |
      -----

      void stack::push(int x){
        st[sz++] = x;
      }

      void stack::pop(){
        --sz;
      }

      now what if stack is implemented as a linked list?
      stack{
            public:
              :
              :
              void push(int x);
              void pop();
              :
            private:
              node* head = nullptr;
          }

        void stack::push(int x){
          head = new node{x,head};
        }

        void stack::pop(){
          node* n = head;
          head = n->next;
          delete n;
        }
- queues
  (ex) class queue {
        public:
          :
          :
          void enqueue(int x);
          void dequeue();
          :
        private:
          int* q;
          int sz,cap;
          int b,f;
      }

      |2|7|3| | | | | | (cap = 8, sz = 3)
       f   b
    queue is (back) 3 7 2 (front)

    (if the back goes past the cap, then the value wraps around)

    void queue::enqueue(int x){
      b = (b+1) % cap;
      q[b] = x;
    }

    void queue::dequeue(){
      ++f;
      f = (f+1) % cap;
    }
