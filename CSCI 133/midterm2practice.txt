1 Binary Search

(1) int binary_search(const vector<int>& vs, int target)
{
  int i = 0;
  int j = vs.size() - 1;
  while (i <= j){
    int k = (j - i)/(2 + i);
    if (target < vs[k])
      j = k-1;
    else if (target == vs[k])
      return k;
    else if (target > vs[k])
      i = k+1;
  }
  return -1;

}

(2) int binary_search(const vector<int>& vs, int target, int start, int end){
  int x = (end-start)/(2+start);
  while (start <= end){
    if (target < vs[x])
      return binary_search(vs,target,start,x - 1);
    else if (target > vs[x])
      return binary_search(vs,target,x+1,end);
    else if (target == vs[x])
      return x;
  }
  return -1;
}

(3) int* binary_search(int* begin, int* end, int target){
  int x = (end-begin)/(2+begin);
  while(begin <= end){
    if(target < arr[x])
      end = x - 1;
    else if(target == arr[x])
      return x;
    else if(target > arr[x])
      begin = x + 1;

  }
  return nullptr;
}

(4) int* binary_search(int* begin, int* end, int target){
  int x = (end-begin)/(2+begin);
  while(begin <= end){
    if(target < arr[x])
      binary_search(begin,x-1,target);
    else if(target == arr[x])
      return x;
    else if(target > arr[x])
      binary_search(x+1,end,target);
  }
  return nullptr;
}

(5) maximum of 99 iterations

2 Sorting

(1) void selection_sort(const vector<int>& v){
  for (int i = 0; i < v.size() - 1; ++i){
    int min = i;
    for (int j = i+1; j < v.size(); ++j){
      if (v[min] > v[j])
        min = j;
        swap(v[min],v[i]);
    }
  }
}

(2) void selection_sort(int* begin, int* end){
  for (int i = begin; i < v.size() - 1; ++i){
    int min = i;
    for (int j = i+1; j < v.size(); ++j){
      if (v[min] > v[j])
        min = j;
        swap(v[min],v[i]);
        selection_sort(begin+1,end)
        }
  }
}

(3) void insertion_sort(const vector<int>& v){
  for(int i = 1; i < v.size(); ++i){ // swap v[i] down into v[i-1]....v[0]
    for(int j = i; j > 0; --j){
      if(v[i] < v[j])
        swap(v[i],v[j]);
      else
        break;
    }
  }
}


void insertion_sort(const vector<int>& v){
  for (int i = 1; i < v.size(); ++i)
    for (int j = i; j > 0; --j)
      if (v[i] < v[j])
        swap(v[i],v[j])
      else
        break;
}

(4) void bubble_sort(const vector<int>& v){
  for (int i = 0; i < v.size() - 1; ++i)
    for (int j = i; j < v.size() - i; ++j)
      if (v[i] > v[j])
        swap(v[i],v[j]);
}

(5) void merge(vector<int> input, int mid, vector<int>& output){
  int i = 0;
  int j = sz/2;
  int k = 0;
  while ((i < sz/2) && (j < sz))
    if(input[i] < input[j])
      output[k] = input[i];
      ++i;
    else if(input[i] > input[j])
      output[k] = input[j];
      ++j;
    ++k;
  while(i<sz/2)
    output[k] = input[i];
    ++i;
    ++k;
  while(j<sz)
    output[k] = input[j];
    ++j;
    ++k;

}

void merge(vector<int> input, int mid, vector<int>& output){
  int i = 0;
  int j = sz/2;
  int k = 0;
  while((i<sz/2) && (j < sz))
    if ((input[i] < input[j]))
      output[k] = input[i];
      ++i;
    else if ((input[i] > input[j]))
      output[k] = input[j];
      ++j;
    ++k;
  while(i<sz/2)
    output[k] = input[i];
    ++i;
    ++k;
  while(j<sz)
    output[k] = input[j];
    ++j;
    ++k;
}

(6) int partition(int* data, int sz){
  int i = -1;
  int j = sz;
  int p = 8;
  while(true)
    do ++i while(p > data[i]);
    do --j while(p < data[j]);
    if(i >= j)
      return j+1;
    swap(data[i],data[j]);

}

(7) the choice of pivot is important because we want as equal partitions as
possible to maximize sorting accuracy.

(8) O(nlogn) for best and worst case of mergesort, O(n^2) for worst case and O(nlogn)
for best case of quicksort

3 Binary search Trees

(1) BST search property: at any node n, all of n's left descendants must be < n and all n's
right descendants must be > n

(2) best case of find(): O(logn), worst case of find(): O(n)

(3) 5, 10, 15, 20, 25, 30, 35, 40, 45, 50 creates a degenerate tree

(4) node* largest(node* root){
  while (root && root->right != nullptr)
    root = root->right;

  return root;
}

  node* smallest(node* root){
    while (root && root->left != nullptr)
      root = root->left;

    return root;
  }


void sort(vector<int>& v){
  for (int i = 0; i < v.size(); ++i)
    int min = i;
    for (int j = i; j < v.size(); ++j)
      if (v[j] < v[i])
        min = j;
        swap(v[i],v[min]);
}

void sort(vector<int>& v, int begin, int end){
  for (int i = begin; i < v.size(); ++i)
    int min = i;
    for (int j = i; j < v.size(); ++j)
      if (v[j] < v[i])
        min = j;
        swap(v[i],v[min]);
}

void sort(vector<int>& v) {
  for (int i = 0; i < v.size(); ++i)
    int min = i;
    for (int j = i; j < v.size(); ++j)
    if (v[j] < v[i])
      min = j;
      swap(v[i],v[min]);
}

void bubble_sort(vector<int>& v) {
  for (int i = 0; i < v.size(); ++i)
  bool did_swap = true;
    for(int j = 0; j < v.size() - i - 1; ++j)
      if (v[i] > v[j])
        swap(v[i],v[j]);
        did_swap = true;
    if (did_swap == false) return;
}

void insertion_sort(vector<int>& v) {
  for (int i = 0; i < v.size(); ++i)
    for (int j = i; j > 0; --j)
      if (v[j] < v[j-1])
        swap(v[j],v[j-1]);
}

void insertion_sort(vector<int>& v) {
  for (int i = 0; i < v.size(); ++i)
    for (int j = i; j > 0; --j)
      if (v[j] < v[j-1])
        swap(v[j], v[j-1]);
}

void bubble_sort(vector<int>& v) {
  for (int i = 0; i < v.size(); ++i)
    bool is_swapped = true;
    for (int j = i; j < v.size()-i-1; ++j)
    if (v[i] > v[j])
      swap(v[i],v[j]);
      is_swapped = true;
    if (!is_swapped)
      return;
}

void binary_search(const vector<int>& vs, int target) {
  int x = 0;
  int y = sz - 1;
  int mid = (y-x)(2) + x;
  while (low <= high)
    if (target < v[mid])
      y = mid - 1;
    else if (target == v[mid])
      return mid;
    else if (target > v[mid])
    x = mid + 1
  return -1;
}

void binary)search(const vector<int>& vs, int target) {
  int low = 0;
  int high = sz - 1;
  int mid = (high-low)/2 + low;
  while (low <= high)
    if (v[mid] < target)
      low = mid + 1;
    else if (v[mid] == target)
      return mid;
    else
      high = mid - 1;

    return -1;
}

void merge (vector<int> input, int mid, vector<int>& output){
  int i = 0;
  int j = mid;
  int k = 0;
  while ((i < mid/2) && (j < mid))
    if (input[i] < input[j])
      output[k] = input[i];
      ++i;
    else if (input [j] < input[i])
      output[k] = input[j];
      ++j;
    ++k;
  while(i < mid/2)
    output[k] = input[i];
    ++i;
    ++k;
  while(j < mid)
    output[k] = input[j];
    ++j;
    ++k;
}

int partition(int* data, int sz){
  int i = -1;
  int j = sz;
  int p;
  while (true){
  do ++i while (p > data[i])
  do --j while (p < data[j])
  if (i >= j)
    return j+1;
  swap(v[i],v[j]);
  }
  while(p > data[i]) ++i;
  while(p < data[j]) --j;
}
