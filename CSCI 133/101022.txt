Midterm 1 Review
----------------

Module 1:
(1)

class ordered_array{
  public:
    :
    int count(int x);
    :
  private:
    int* data;
    int sz, cap;
}

int ordered_array::count(int x)
{
  int c = 0;
  for(int i = 0; i < sz; ++i)
    if(data[i] == x)
      ++c;
  return c;
}

(2) "semi-ordered"

{1,5,4,3,2,6} -> true (>= 1 and <= 6)

{1,5,-2,7,3,6} -> false (-2 is not >= 1; 7 is not <= 6)

bool is_semi_ordered(const vector<int>& v)
{
  for(int i = 0; i < v.size(); ++i)
    if(v.at(i) < v.front() or v.at(i) > v.back())
      return false;
  return true;
}

best case: O(1)
worst case: O(n)

(3)

class ordered_array{
  public:
    :
    int max();
    :
  private:
    int* data;
    int sz, cap;
}

int ordered_array::max()
{
  return data[sz-1]; //since the array is ordered
}

(4) "zig-zag" print for vectors

void zigzag_print(const vector<int>& v)
{
  for(int i = 0, j = v.size()-1; i <= j; ++i,--j){
    cout << v[i] << " ";
    if(i!=j)
      cout << v[j] << " ";
  }
}

(5)
void f(vector<int>& v)
{
  int i = 0, j = v.size()-1;
  while(i < j){
    std::swap(v[++i],v[j--]);
  }
}

Module 2:
(6) step-wise analysis
vector<int> remove_neg(const vector<int>& v)
{
  vector<int> out; //empty
  for(int i = 0; i < v.size(); ++i)
    if(v[i] >= 0)
      out.push_back(v[i]);
  return out;
}

count:
          v[i] >= 0     v[i]    push_back()
  best:       n         n + 0       0         all negative elements
  worst:      n         n + n       n         all positive elements

(7) A vector starts with cap = 1, sz = 0. When vector is full (sz==cap), the cap doubles (2x)
vector v;
for(int i; i = 0; i < 100; ++i)
  v.push_back(i);
-final size: 100
-final cap: 128

size  |  cap
------------
1        1
2        2 (2^1)
3        4 (2^2)
4        4
:        :
8        8 (2^3)
:
16       16 (2^4)
:
32       32 (2^5)
:
64       64 (2^6)
:
100      128 (2^7) <= size reaches 100 before it hits capacity of 128
-how many reallocations have occurred: log_2(100) = 6.~~~ = 7

(8)
class olist {
  public:
    :
    void insert_ordered(int x);
    :
    // you can use
    void insert_after(node* n, int x);
    int at(int i); // It's a trap!! O(n^2)
    int size(); // It's a trap!! O(n^2) when inside a loop
  private:
    node* head = nullptr;
}

nullptr p         1 (n) -> 3 -> 7 -> 10 /
                              ^ insert 6
insert_ordered(6);
|
V
insert_after(after 3, 6)

node* p = nullptr;
node* n = head;
while(n != nullptr){
  if(x < n->value)
    insert_after(p,x);
    return;
  p = n;
  n = n->next;
}
insert_after(p,x);

(9) list-based stack
class stack {
  public:
    void push(int x);
    int pop();
    :
    void throw_stack_underflow();
  private:
    node* head = nullptr;
}

cases: if head is nullptr and if head is not nullptr

void stack::push(int x){
  node* n = new node;
  n-> value = x; //new value
  n -> next = head; // previous top-most value
  head = n;
}

int stack::pop(){
  node* n = head;
  head = head->next;
  int x = n->value;
  delete n;
  return x;
}

(10) array-based queue

class queue{
  public:
    void enqueue(int x);
    void dequeue();
    :
  private:
    int* q;
    int len,cap;
    int front,back;
}

void queue::enqueue(int x)
{
  if (len == cap)
    throw_queue_overflow();
  ++back;
  if(back == cap)
    back = 0;
  q[back] = x;
  ++len;
}

void queue::dequeue(int x)
{
  if (len == 0)
    throw_queue_underflow();
  ++front;
  if(front == cap)
    front == 0;
}

Mergesort
---------
|1|5|7|10|0|2|3|4|
split into two
a |1|5|7|10|   b |0|2|3|4|  len(a) does not have to equal len(b)
index i at a[0], index j at b[0]
find greater of i or j
if i or j is bigger, keep i or j where it is and move j/i to next index
when i or j == size, then list the rest of elements from the other array because
they are all bigger elements than those in a or b
output: |0|1|2|3|4|5|7|10|
complexity: O(n) // loops over each element once

void merge(int* in, int sz, int* out)
{
  int i = 0, j = sz/2, k = 0;
  while(i < sz/2 and j < sz){
    if(in[i] < in[j]){
      out[k] = in[i];
      ++i;
    }
    else{ // in[i] >= in[j]
      out[k] = in[j];
      ++j;
    }
    ++k;
  } //here, i == sz/2 or j == sz
  //from here, one of the following while loops will run:
  while(i<sz/2){ // copy rest of elements from i's half of array
    out[k] = in[i];
    ++i;
    ++k;
  }
  while(j<sz){ // copy rest of elements from j's half of array
    out[k] = in[j];
    ++j;
    ++k;
  }
}

ex: |2|5|0|10|4|7|1|3|
|2|5|0|10| |4|7|1|3|
|2|5| |0|10| |4|7| |1|3|
|2| |5| |0| |10| |4| |7| |1| |3|
apply merge ->
|2|5| |0|10| |4|7| |1|3|
apply merge ->
|0|2|5|10| |1|3|4|7|
apply merge ->
|0|1|2|3|4|5|7|10|

breaking down elements into individual arrays has complexity of O(log_2(n))
building up elements from individual arrays to sorted array is O(log_2(n))
actual mergesort is O(n) because it loops over all elements
so total work = O(nlog(n))

void mergesort(int* in, int sz, int* out)
{
  if(sz == 0)
    return;
  else if(sz == 1)
    out[0] = in[0];
  else{
    // sz >= 2
    int mid = sz/2;
    mergesort(in,mid,out); //only sorts left half of array
    mergesort(in + mid, sz - mid, out + mid); //only sorts right half of array
    for (int i = 0; i < sz; ++i)
      in[i] = out[i]; // sends out elements to in
    merge(in,sz,out); // merges in elements and sends to out
  }
}
