Module 3: Recursion, Searching, and Sorting
-------------------------------------------
-recursion: solving big problems by breaking the down into smaller problems with the same "shape"
as the original

1. How can we make the problem smaller? ("shrink" component of recursion)
2. What is smallest/simplest form of the problem? (base case)
3. How do we "grow" an answer to a small question into the original answer? ("grow")

ex: write a recursive function max
  int max(vector<int> v);
  which returns the largest value in v.

  max({1,2,3})------------------> 3
  | v.pop_back() ("shrink")       ^ max(3,2)
  v                               | ("grow")
  max({1,2}) ---leap-of-faith---> 2
  |
  v
  max({1}) ---------------------> 1 (base case)

  comparing max({1,2,3}) and 2
  the discarded number 3 is greater than 2, so the answer is 3
  1 is the first number in the vector, so 1 is the base case

  max({3,2,1})------------------> 3
  | v.pop_back() ("shrink")       ^ max(1,3)
  v                               | ("grow")
  max({3,2}) ---leap-of-faith---> 3
  |
  V
  max({3}) ---------------------> 3 (base case)

  comparing max({3,2,1}) and 3
  the discarded number 1 is less than 3, so the answer is 3
  3 is the first number in the vector, so 3 is the base case

  int max(vector<int> v)
  {
    if(v.size() == 1)
      return v[0];
    else {
      int y = v.back();
      v.pop_back();
      int x = max(v);
    }
    return std::max(x,y) (equivalent to x>y ? x:y)
  }

  x = max({3,1,2}) = 3, y = 2
  x = max({3,1}) = 3, y = 1 (3>2)
  x = max({3}) = 3 (3>1)
  --> 3
  runtime: O(n^2) (due to vector copies in parameter)

  ex: now write a recursive function max
    int max(const vector<int> v, int i = 0);
    which returns the largest value in v[i]...v[size-1].

    max({1,2,3},0)---------------------> 3
    |                                   ^
    v                                   |
    max({1,2,3},1) ---leap-of-faith---> 3
    |
    V
    max({1,2,3},2) -------------------> 3 (base case)

    comparing max({1,2,3}) and 3
    number 1 at index 0 is less than 3, so the answer is 3
    3 == v[2] == v.size()-1, so 3 is the base case

    int max(const vector<int>& v, int i = 0)
    {
      if(i==v.size()-1)
        return v[i];
      else{
        int y = v[i];
        int x = max(v,i+1);
        return std::max(x,y);
      }
    }

    runtime: O(n) because there are no copies

ex: write the function
    int max(vector<int> v);
    which returns the largest value in v, assuming that v is sorted in ascending order

    int max(vector<int> v) (O(n) because this makes copies)
    {
      return v.back(); (O(1))
    }

    Why does this work?
    -------------------
    "sorted in ascending order"
      v[i] <= v[i+1]
      v[0] <= v[1] <= v[2] <= ..... <= v[n]
      <= is transitive, meaning that it follows that v[0] <= v[n]

ex: find the index of some target value x in vector v or -1 if x does not exist
v[/|/|/|/|/|y| | | | ]
   >= y        <= y
x = ...
compare x with y: {(x < y) - search left, (x==y) - done!, or (x > y) - search right
(this is known as a binary search ^^^)

Binary Search
-------------
(1) find the midpoint value in the search range y
(2) compare x with y
  - if x < y, search left
  - if x == y, done!
  - x > y, search rights
(3) if search range is empty, stop because the value DNE

int bin_search(const vector<int> v, int x) // only works if vector is in asc. order
  {
  int f = 0; b=v.size()-1;
  while(f <= b){
    int mid = (f + b) / 2; //this is outdated and wrong as it can produce an integer overflow
      -right most of the time but still wrong)
    while(f <= b){
      int mid = (b - f) / 2 + f; //overflow
    }
    if (x==v[mid])
      return mid;
    else if (x < v[mid])
      b = mid - 1;
    else if(x > v[mid[]]) f = mid + 1

  }
  return -1;
  }
  complexity: O(log_n) (since code searches roughly half of vector size)
-integer overflow;
  -if add two really big ints, it would overflow and result in a negative integer
  INT_MIN ..... <--------0---------> ..... INT_MAX
  INT_MAX + 1 = INT_MIN

ex: v[2|3|7|10|14|21|69]
suppose that x = 21, then f=14 and b=69
compare 21 with 10: 21 > 10, search right
compare 21 with 21: 21 == 21, Done! @ 5

now suppose that x = 16, then f=2 and b=69 and middle=10
compare 16 with 10: 16 > 10, search right
f=14 and b = 69 and middle = 21
compare 16 with 21: 16 < 21, search left
f=14 and b=14 and middle = 14
compare 16 with 14: 16 > 14, search right
f=21 and b=14 (there are no more spots)
since f <= b is now false, Not found

wrapper function: int bin_search(const vector<int>&v, int x)
{
  return bin_search(v,x,0,v.size()-1)
}

int bin_search(const vector<int>& v, int x, int f, int b) //linearly tail recursive
{
  if(f > b)
    return -1; //the base case is the negation of the loop condition
  else{ //we know that f <= b
    int mid = (b-f)/2 + f;
    if (x == v[mid])
      return mid; //Fount it!
    else if (x < v[mid])
      return bin_search(v,x,f,mid - 1); //mid-1 is the new b
    else // x > v[mid]
      return bin_search(v,x,mid + 1,b); //mid+1 is the new f
  }
}

Sorting
-------
What does it mean to "sort" a sequence?
v[i] <= v[i+1]
v[0] <= v[1] <= v[2] <= ..... <= v[n]
ex: {7,3,5,2,9} --"sort"--> {1,2,3,4} //incorrectly sorted
-result must be a permutation of the original sequence;
 not allowed to throw away or add anything

-properties of sorting algorithms
  -runtime: O(n^2) vs O(nlogn)
  -memory usage: O(1) "in-place algorithm" vs O(n) "not in-place algorithm"
    -"in-place algorithm" does not need extra memory (copies) for data
  -adaptive: runs faster for partially-sorted input (best-case runtime is O(n))
  -stable: can be used in a multi-stage sort, preserving existing order if possible

  ex: Last name | First name
    -------------------------
      Smith     | Jorge
      Levi      | Helen
      Levi      | Bob
      Smith     | Frank
sort by first name then by last name
    Last name | First name
  -------------------------
    Levi      | Bob
    Smith     | Frank
    Levi      | Helen
    Smith     | Jorge
then
    Last name | First name
-------------------------
Levi      | Helen
Levi      | Bob
Smith     | Jorge
Smith     | Frank

The last sort (by last name) was NOT STABLE, meaning that it did not
preserve the existing order

O(n^2) Sorting Algorithms
-------------------------
-selection sort:
  [ |        | |        ]   ---swap smallest with index 0--->
              ^
              |
           smallest
  [/| |            | |  ]   ---swap smallest with index 1--->
                    ^
                    |
                 smallest
and so on and so forth until last index is selected (?)

void sel_sort(vector<int>& v) //O(n^2) compelxity, O(1) memory, not adaptive,
not stable because it swaps elements far apart
{
  for (int i = 0; i < v.size()-1; ++i){
    //find smallest in v[i]....v[size()-1]
    int smallest = i;
    for (int j = i+1; i < v.size(); ++j)
      if(v[j] < v[smallest])
        smallest = j;
    swap(v[i], v[smallest]);
  }
}
