CPU - Hardware Communication
----------------------------
-interrupts: a signal that something has happened
  -interrupt vector table: array of pointers that is indexed whenever something happens
  -hardware interrupts: signals sent from hardware devices
    -primary use of interrupts of the GameBoy system
  -traps: interrupts generated by the CPU itself
  -software interrupt: generated by a program
-ports: bidirectional communication links between CPU and the hardware
  -on x86, two port instructions:
    in ______, ________ ; reads a byte at a time
        dest    port #
    out ________, ________ ; writes a byte at a time
         port #     src
  -GameBoy CPU has no ports
-memory-mapped I/O: there are some addresses in the accessible address space that are intercepted
 by hardware
-most of the ROM comes from the cartridge
-useful MMIO addresses:
  -ff00 : D-pad input
  -ff42, ff43 : scroll position (X,Y) along the extended tilemap
  -ff40, ff44 : LCD control (turn screen on/off), status (what the screen is doing right now)
-cartridge ROM format:
  -first 160 bytes: interrupt table (of a maximum of 80 potential interrupts)
  -first 0x150 bytes: cartridge header (Nintendo logo)
    -machine refuses to boot unless the Nintendo logo is there
-fonts are uploaded into tileset
-comparisons on GameBoy are only 8-bit, so 16-bit registers can be computed by ORing the
8-bit components
-INCBIN "filename.type" pastes file into Assembly
  ex: bc == 0 ---> b OR c == 0

Macros (YASM)
-------------

-single-line macro: replaces at most one line of text
  ex:
  %define sum rax ; finds the text "sum", replaces it with rax
  :
  :
  mov sum, 0 ; -> mov rax, 0
  :
  :
  add sum, 1 ; -> add rax, 1
  :
  %define sum r12 ; -> now "sum" is replaced with r12
  :
  add sum, 2 ; -> add r12, 2
  %undef sum
  :
  add sum, 3 ; assembler ERROR, there is no replacement for "sum" at this time

  ex:
  %define rax r12
  add rax, 2 ; add r12, 2
  %undef rax
  add rax, 3 ; add rax, 3

  ex:
  %define sum rax
  %define inc_sum add sum, 1 ; order in which these are defined does not matter
  :
  :
  inc_sum ; replaced by -> add sum, 1 -> add rax, 1
  :
  :
  %define sum r12
  :
  :
  inc_sum ; replaced by -> add sum, 1 -> add r12, 1
